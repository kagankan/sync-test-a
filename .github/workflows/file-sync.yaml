# .github/workflows/file-sync.yaml
name: Repo File Sync

on:
  workflow_dispatch: 
  schedule:
    - cron: "0 0 * * MON" # Run workflow at 9:00 JST every MON

jobs:
  sync:
    runs-on: ubuntu-latest
    # env:
    #   # ワークフローの書き換えにはworkflows権限が必要
    #   SETTINGS: |
    #     [
    #       {
    #         "owner": "kagankan",
    #         "repo": "sync-test-b",
    #         "paths": [
    #           "README.md",
    #           ".eslintrc",
    #           "test/*.md",
    #           ".github/workflows/test.yaml",
    #           ".github/workflows/test.yml"
    #         ]
    #       },
    #       {
    #         "owner": "kagankan",
    #         "repo": "sync-test-c",
    #         "paths": [
    #           "README.md"
    #         ]
    #       }
    #     ]
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.FILE_SYNC_APP_ID }}
          private-key: ${{ secrets.FILE_SYNC_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - uses: actions/checkout@v4
        with:
          # ここに権限を与えないと、workflowsの書き換えができない
          token: ${{ steps.generate_token.outputs.token }}
      - name: 前回の同期時刻を取得
        id: get_previous_run
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: "file-sync.yaml",
              per_page: 2,
            });
            console.log(runs);
            const previousRun = runs.workflow_runs[1];
            if (!previousRun) {
              // 初回の場合は空文字を返す
              return '';
            }
            return previousRun.run_started_at;
      - name: Read settings from YAML
        id: read_settings
        run: |
          settings=$(cat .github/file-sync-settings.yaml | yq -o json '.settings')
          echo $settings
          echo "SETTINGS=$settings" >> $GITHUB_ENV
      - name: ファイル反映
        env:
          # ghコマンドを使うために必要
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git config user.name "file-sync [bot]"
          git config user.email "<email@example.com>"

          previous_run="${{ steps.get_previous_run.outputs.result }}"
          echo "previous_run: $previous_run"
          # previous_runが空の場合は初回
          [ -z "$previous_run" ] && initial_run=true || initial_run=false

          workspace_dir=$(pwd)

          # SETTINGSをループ
          settings=$(echo "$SETTINGS" | jq -c '.[]')
          for setting in $settings; do
            owner=$(echo "$setting" | jq -r '.owner')
            repo=$(echo "$setting" | jq -r '.repo')
            paths=$(echo "$setting" | jq -r '.paths[]' | sed 's/\n/ /g')
            branch_tmp="file-sync/$repo/${{ github.run_id }}-tmp"
            branch_new="file-sync/$repo/${{ github.run_id }}"
            repo_full="$owner/$repo"
            tmp_dir="tmp"

            echo "========================================"
            echo "$owner/$repo の反映"
            echo "========================================"

            # クローン
            # 直近20件以内にはあるだろう、という決め打ち
            git clone --filter=blob:none --no-checkout --sparse --depth 20 https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$repo_full.git $tmp_dir
            
            pushd $tmp_dir

            # コミット履歴からマージされたプルリクエストを取得
            # mergesがないと関係ないコミットも拾ってしまった
            merge_logs=$(git log --sparse --merges --first-parent --since "$previous_run" --oneline --pretty=format:'%s' -- $paths)
            
            # merge_logsが空の場合は何もしない
            if [ -z "$merge_logs" ] && [ $initial_run = false ]; then
              echo "反映する変更がありません"
              popd
              rm -rf $tmp_dir
              continue
            fi

            # sparse-checkoutを設定
            git config core.sparseCheckout true
            git sparse-checkout set --no-cone $paths
            git checkout

            # 作業ブランチを作成
            popd
            git checkout -b $branch_tmp origin/main  
            
            # 初回は丸ごとコピーするので、前回時点のファイルを反映しない
            if [ $initial_run = false ]; then
              # 前回時点のファイルを反映
              pushd $tmp_dir
              previous_commit=$(git rev-list -1 --before="${{ steps.get_previous_run.outputs.result }}" main)
              echo "previous_commit: $previous_commit"
              git -c advice.detachedHead=false checkout $previous_commit
              popd
              rm -rf $paths # 削除ファイルを反映するために一旦削除
              rsync $tmp_dir/ . -r --exclude '.git/'

              # コミット作成
              git add . ":!$tmp_dir"
              git commit -m "$repo の前回時点を反映" || echo "No changes to commit"
            fi

            # 追加分のファイル同期
            pushd $tmp_dir
            git checkout origin/main
            popd
            rm -rf $paths # 削除ファイルを反映するために一旦削除
            rsync $tmp_dir/ . -r --exclude '.git/'

            # コミット作成
            git add . ":!$tmp_dir"
            git commit -m "$repo の変更を反映" || echo "No changes to commit"

            commit_hash=$(git rev-parse HEAD)
            git checkout -b $branch_new origin/main  
            rm -rf $tmp_dir

            conflict=false
            # コンフリクトしたときと、何も差分がないときにエラーになる
            git cherry-pick $commit_hash || {
              git_status=$(git status -s)
              [ -z "$git_status" ] && {
                echo "差分がありません"
                git cherry-pick --skip
                continue
              }

              conflict=true
              echo "コンフリクトしました"
              git checkout --theirs .
              git add . ":!$tmp_dir"
              git cherry-pick --continue
              git push origin $branch_tmp
            }
            git push origin $branch_new

            # スラッシュが入るため、デリミタを変える
            merged_pulls=$(echo $merge_logs | grep -o '#[0-9]\+' | sed "s|^|$repo_full|")

            # プルリクエストを作成
            echo "Creating pull request"
            gh pr create \
            -B main -H $branch_new \
            --reviewer kagankan \
            --title "$repo 取り込み $($conflict && echo '（コンフリクト）' || echo '')" \
            --body "$($conflict && echo "反映中にコンフリクトが発生しました。
            
          - 上書きする場合：このままマージしてください。
          - 手動で修正する場合：このPRはクローズし、新しいブランチで \`git cherry-pick $commit_hash\` を実行してPRを作成してください。
          - 反映する必要がない場合：クローズしてください。" || echo '自動生成の取り込みです。マージするかクローズしてください。')

          ## 関連PR
          $($initial_run && echo '初回反映です' || echo "$merged_pulls")"

          done
