# .github/workflows/repo-file-sync.yaml
name: Repo File Sync

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 3 * * MON-FRI' # Run workflow at 12:00 JST every MON-FRI
permissions:
  contents: write
jobs:
  sync:
    strategy:
      matrix:
        settings:           
          -  |
             {
                "owner": "kagankan",
                "repo": "sync-test-b",
                "paths": [
                  "README.md",
                  "test/*.md"
                ]
             }
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        id: setup
        run: |
          git config user.name "GitHub App Bot"
          git config user.email "<email@domain.com>"
          git fetch
          git checkout -B file-sync/${{ fromJSON(matrix.settings).repo }} origin/file-sync/${{ fromJSON(matrix.settings).repo }} || git checkout -b file-sync/${{ fromJSON(matrix.settings).repo }}
          LAST_SYNC_AT=$(git log -1 --format=%ci HEAD)
          echo "last_sync_at=$LAST_SYNC_AT" >> $GITHUB_OUTPUT
          echo $LAST_SYNC_AT

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.REPO_FILE_SYNC_APP_ID }}
          private_key: ${{ secrets.REPO_FILE_SYNC_PRIVATE_KEY }}

      - name: List PRs with changes to specific file
        uses: actions/github-script@v7
        id: list_prs
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const parsedOptions = ${{ matrix.settings }};
            
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: parsedOptions.owner,
              repo: parsedOptions.repo,
              state: 'closed'
            });

            const sinceDate = new Date("${{ steps.setup.outputs.last_sync_at }}");

            // 前回の反映以降にマージされたPR
            const mergedPRs = pullRequests.filter(pr => pr.merged_at && new Date(pr.merged_at) > sinceDate);


            core.setOutput('targetPaths', parsedOptions.paths.join('\n'));

            // 対象ファイルをリスト化
            const globber = await glob.create(parsedOptions.paths.join('\n'), {followSymbolicLinks: false});
            const targetFiles = (await globber.glob()).map((file) => file.replace(`${process.env.GITHUB_WORKSPACE}/`, ''));
            console.log(targetFiles);

            const prsWithFileChanges = new Set();
            const changedFiles = new Set();
            for (const pr of mergedPRs) {
              const { data: files } = await github.rest.pulls.listFiles({
                owner: parsedOptions.owner,
                repo: parsedOptions.repo,
                pull_number: pr.number
              });

              for (const targetPath of targetFiles) {
                const fileChanged = files.some(file => file.filename === targetPath);
                if (fileChanged) {
                  changedFiles.add(targetPath);
                  prsWithFileChanges.add(`${parsedOptions.owner}/${parsedOptions.repo}#${pr.number}: ${pr.title}`);
                }
              }
            }

            if (prsWithFileChanges.size > 0) {
              console.log('Changes found');
            } else {
              console.log('No changes');
            }
            core.setOutput('changedFiles', Array.from(changedFiles).join('\n'));
            core.setOutput('description', Array.from(prsWithFileChanges).join("\n"));
      - name: チェックアウトテスト
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          repository: ${{ fromJSON(matrix.settings).owner }}/${{ fromJSON(matrix.settings).repo }}
          path: ${{ fromJSON(matrix.settings).owner }}/${{ fromJSON(matrix.settings).repo }}
          sparse-checkout: |
            ${{ steps.list_prs.outputs.targetPaths }}
          sparse-checkout-cone-mode: false 
      - name: チェック
        run: |
          echo "$PWD"
          tree
      - name: Sync Repositories
        if: ${{ steps.list_prs.outputs.changedFiles != '' }}
        run: |
          # Clone the repository
          REPO=${{ fromJSON(matrix.settings).owner }}/${{ fromJSON(matrix.settings).repo }}
          git clone --depth 1 https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$REPO.git $REPO
          # Copy the specified files
          FILES="${{ steps.list_prs.outputs.changedFiles }}"
          for FILE in $FILES; do
            echo "Copying $FILE from $REPO"
            mkdir -p $(dirname "$FILE")
            cp -r "$REPO/$FILE" "$FILE"
          done
          # Clean up the cloned repository directory
          rm -rf $REPO
     
          git add .
          git commit -m "Update file from source repository" || echo "No changes to commit"
          git push origin file-sync/${{ fromJSON(matrix.settings).repo }}
          COMMIT_HASH=$(git rev-parse HEAD)
          git checkout -b file-sync/${{ fromJSON(matrix.settings).repo }}-${{ github.run_id }} origin/main
          git cherry-pick $COMMIT_HASH
          git push origin file-sync/${{ fromJSON(matrix.settings).repo }}-${{ github.run_id }}

      - name: Create Pull Request
        if: ${{ steps.list_prs.outputs.changedFiles != '' }}
        run: |
          gh pr create \
          -B main -H file-sync/${{ fromJSON(matrix.settings).repo }}-${{ github.run_id }} \
          --title '取り込み' \
          --body '自動生成の取り込みです。マージするかクローズしてください。
            ## 関連PR
            ${{ steps.list_prs.outputs.description }}'
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        
