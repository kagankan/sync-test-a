# .github/workflows/repo-file-sync.yaml
name: Repo File Sync

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 3 * * MON-FRI" # Run workflow at 12:00 JST every MON-FRI

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      # ワークフローの書き換えにはworkflows権限が必要
      SETTINGS: |
        [
          {
            "owner": "kagankan",
            "repo": "sync-test-b",
            "paths": [
              "README.md",
              ".eslintrc",
              "test/*.md",
              ".github/workflows/test.yaml",
              ".github/workflows/test.yml"
            ]
          },
          {
            "owner": "kagankan",
            "repo": "sync-test-c",
            "paths": [
              "README.md"
            ]
          }
        ]
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.REPO_FILE_SYNC_APP_ID }}
          private_key: ${{ secrets.REPO_FILE_SYNC_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          # ここに権限を与えないと、workflowsの書き換えができない
          token: ${{ steps.generate_token.outputs.token }}
      - name: Get Previous Run Status
        id: get_previous_status
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: "repo-file-sync.yaml",
              per_page: 2,
              page: 1,
            });
            console.log(runs)
            return runs.workflow_runs[1].run_started_at;
        #env:
        #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: ファイル反映
        env:
          # ghコマンドを使うために必要
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git config user.name "file-sync [bot]"
          git config user.email "<email@example.com>"

          settings=$(echo "$SETTINGS" | jq -c '.[]')

          # 変更をもってくる
          echo "$settings" | while IFS= read -r setting; do
            owner=$(echo "$setting" | jq -r '.owner')
            repo=$(echo "$setting" | jq -r '.repo')
            PATHS=$(echo "$setting" | jq -r '.paths[]' | sed 's/\n/ /g')
            FILE_SYNC_BRANCH_TMP="file-sync/$repo/tmp"
            FILE_SYNC_BRANCH_NEW="file-sync/$repo/${{ github.run_id }}"

            echo "========================================"
            echo "$owner/$repo の反映"
            echo "========================================"
            

            INITIAL=false
            #  前回の同期時刻を取得
            LAST_SYNC_AT="${{ steps.get_previous_status.outputs.result }}"
            echo "LAST_SYNC_AT: $LAST_SYNC_AT"

            # クローン
            REPO_FULL="$owner/$repo"
            TMP_DIR="tmp"
            rm -rf $TMP_DIR
            # 直近20件以内にはあるだろう、という決め打ち
            git clone --filter=blob:none --no-checkout --sparse --depth 20 https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$REPO_FULL.git $TMP_DIR
            
            pushd $TMP_DIR

            git log --oneline
            
            git config core.sparseCheckout true
            git sparse-checkout set --no-cone $PATHS
            git checkout


            # コミット履歴からマージされたプルリクエストを取得
            # mergesがないと関係ないコミットも拾ってしまった
            MERGE_COMMITS=$($INITIAL && echo "初回反映です" || git log --sparse --merges --first-parent --since "$LAST_SYNC_AT" --oneline --pretty=format:'%s' -- $PATHS)
            
            # MERGE_COMMITSが空の場合は何もしない
            if [ -z "$MERGE_COMMITS" ]; then
              echo "反映する変更がありません"
              popd
              continue
            fi

            # 前回時点のコミットに移動
            COMMIT=$(git rev-list -1 --before="${{ steps.get_previous_status.outputs.result }}" main)
            echo "COMMIT: $COMMIT"
            git -c advice.detachedHead=false checkout $COMMIT

            popd
            
            # ファイル同期
            echo $MERGE_COMMITS
            # 削除ファイルあった場合に反映するために一旦削除
            rm -rf $PATHS
            rsync $TMP_DIR/ . -r --exclude '.git/'

            # コミット作成
            git checkout -b $FILE_SYNC_BRANCH_TMP origin/main  
            git add . ":!$TMP_DIR"
            git commit -m "$repo の前回時点を反映" || echo "No changes to commit"

            pushd $TMP_DIR

            git checkout origin/main
            

            popd
            
            # ファイル同期
            # 削除ファイルあった場合に反映するために一旦削除
            rm -rf $PATHS
            rsync $TMP_DIR/ . -r --exclude '.git/'

            # コミット作成
            git add . ":!$TMP_DIR"
            git commit -m "$repo の変更を反映" || echo "No changes to commit"
            git log --graph
            COMMIT_HASH=$(git rev-parse HEAD)
            git checkout -b $FILE_SYNC_BRANCH_NEW origin/main  

            CONFLICT=false
            # コンフリクトしたときと、何も差分がないときにエラーになる
            git cherry-pick $COMMIT_HASH || {
              GIT_STATUS=$(git status -s)
              [ -z "$GIT_STATUS" ] && {
                echo "差分がありません"
                git cherry-pick --skip
                continue
              }

              CONFLICT=true
              echo "コンフリクト"
              git checkout --theirs .
              git add .
              git cherry-pick --continue
            }
            echo "CONFLICT: $CONFLICT"
            git push origin $FILE_SYNC_BRANCH_NEW

            # スラッシュが入るため、デリミタを変える
            MERGED_PULLS=$(echo $MERGE_COMMITS | grep -o '#[0-9]\+' | sed "s|^|$REPO_FULL|" || echo '初回反映です')

            # プルリクエストを作成
            echo "Creating pull request"
            gh pr create \
            -B main -H $FILE_SYNC_BRANCH_NEW \
            --reviewer kagankan \
            --title "$repo 取り込み $($CONFLICT && echo '（コンフリクト）' || echo '')" \
            --body "$($CONFLICT && echo "反映中にコンフリクトが発生しました。
            
          - 上書きで問題ない場合はこのままマージしてください。
          - 手動で修正する必要がある場合は、 \`git cherry-pick $COMMIT_HASH\` を実行して修正の上で別途PRを作成してください。
          - 反映が必要ない場合はクローズしてください。" || echo '自動生成の取り込みです。マージするかクローズしてください。')

          ## 関連PR
          $MERGED_PULLS"

          done
