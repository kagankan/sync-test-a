# .github/workflows/repo-file-sync.yaml
name: Repo File Sync

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 3 * * MON-FRI' # Run workflow at 12:00 JST every MON-FRI
permissions:
  contents: write
jobs:
  sync:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        settings:           
          -  |
             {
                "owner": "kagankan",
                "repo": "sync-test-b",
                "paths": [
                  "README.md",
                  ".eslintrc",
                  "test/*.md"
                ]
             }
    env:
      FILE_SYNC_BRANCH_BASE: file-sync/${{ fromJSON(matrix.settings).repo }}
      FILE_SYNC_BRANCH_NEW: file-sync/${{ fromJSON(matrix.settings).repo }}-${{ github.run_id }}
    steps:
      - uses: actions/checkout@v4

      - name: 前回の同期時刻を取得
        id: setup
        run: |
          git config user.name "GitHub App Bot"
          git config user.email "<email@domain.com>"
          git fetch
          git checkout -B $FILE_SYNC_BRANCH_BASE origin/$FILE_SYNC_BRANCH_BASE || git checkout -b $FILE_SYNC_BRANCH_BASE
          LAST_SYNC_AT=$(git log -1 --format=%ci HEAD)
          echo "last_sync_at=$LAST_SYNC_AT" >> $GITHUB_OUTPUT
          echo $LAST_SYNC_AT

          # 一旦削除
          tree
          rm -rf ${{ join(fromJSON(matrix.settings).paths, ' ') }}
          tree

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.REPO_FILE_SYNC_APP_ID }}
          private_key: ${{ secrets.REPO_FILE_SYNC_PRIVATE_KEY }}
      - name: 改行ありに変換
        uses: actions/github-script@v7
        id: format
        with:
          script: |
            core.setOutput('targetPaths', ${{ matrix.settings }}.paths.join('\n'));
      - name: 対象ファイルをチェックアウト
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          repository: ${{ fromJSON(matrix.settings).owner }}/${{ fromJSON(matrix.settings).repo }}
          path: tmp
          sparse-checkout: ${{ steps.format.outputs.targetPaths }}
          sparse-checkout-cone-mode: false 
          fetch-depth: 10 # 1回の更新までに10件くらいしかないだろうという仮定。0が確実だが、多くなりすぎるため。
          
      - name: マージされたPRをリストアップ
        id: pulls
        working-directory: tmp
        run: |
          # どういう原理かわからないけど --sparseをつけないと削除が含まれない？っぽい
          MERGE_COMMITS=$(git log --sparse --first-parent --since "${{ steps.setup.outputs.last_sync_at }}" --oneline --pretty=format:'%s' -- ${{ join(fromJSON(matrix.settings).paths, ' ') }})
          echo $MERGE_COMMITS
          MERGED_PULLS=$(echo $MERGE_COMMITS | grep -o '#[0-9]\+' || echo '')
          # echo "merged_pulls=$MERGED_PULLS" >> $GITHUB_OUTPUT
          {
            echo 'merged_pulls<<EOF'
            echo "$MERGED_PULLS"
            echo EOF
          } >> "$GITHUB_OUTPUT"
          echo "|$MERGED_PULLS|"

      - name: List PRs with changes to specific file
        uses: actions/github-script@v7
        id: list_prs
        if: ${{ steps.pulls.outputs.merged_pulls != '' }}
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const parsedOptions = ${{ matrix.settings }};

            const prsWithFileChanges = new Set();
            const changedFiles = new Set();
            const mergedPRs = `${{ steps.pulls.outputs.merged_pulls }}`.replaceAll("#", "").split("\n").map(str=>Number(str));
            for (const pullNumber of mergedPRs) {
              const { data: pr } = await github.rest.pulls.get({
                owner: parsedOptions.owner,
                repo: parsedOptions.repo,
                pull_number: pullNumber
              });

              prsWithFileChanges.add(`${parsedOptions.owner}/${parsedOptions.repo}#${pullNumber}: ${pr.title}`);
            }

            if (prsWithFileChanges.size > 0) {
              console.log('Changes found');
            } else {
              console.log('No changes');
            }
            core.setOutput('changedFiles', Array.from(changedFiles).join('\n'));
            core.setOutput('description', Array.from(prsWithFileChanges).join("\n"));

      - name: Sync Repositories
        id: push
        continue-on-error: true
        if: ${{ steps.pulls.outputs.merged_pulls != '' }}
        run: |
          # // TODO: 新規追加ファイルの対応
          # // TODO: 削除ファイルの対応
            # - 一旦削除してコピー←この方向で
              # addのときに対象ファイルだけ
              # rmのときに対象ファイルだけ
            # - 削除ファイルだけ別で検出する
            # - diff のファイル名リストを取得する
          # Copy the specified files
          FILES="${{ steps.format.outputs.targetPaths }}"
          for FILE in $FILES; do
            echo "Copying $FILE from $REPO"
            # ディレクトリ内のファイルが追加されたときのためのmkdir
            mkdir -p $(dirname "$FILE")
            # cpに失敗したら削除
            cp -r "tmp/$FILE" "$FILE" #|| rm -f "$FILE"
          done
          # cp -r tmp/* .
          tree -a -I .git
          # Clean up the cloned repository directory
          rm -rf tmp
     
          git add ${{ join(fromJSON(matrix.settings).paths, ' ') }}
          git commit -m "Update file from source repository" || echo "No changes to commit"
          git push origin $FILE_SYNC_BRANCH_BASE
          COMMIT_HASH=$(git rev-parse HEAD)
          git checkout -b $FILE_SYNC_BRANCH_NEW origin/main
          git cherry-pick $COMMIT_HASH
          git push origin $FILE_SYNC_BRANCH_NEW
      - name: コンフリクトした場合は、機械的な解消は無理なので、「コンフリクトしました」の旨だけPRで知らせる
        if: ${{ steps.push.conclusion == 'failure' }}
        run: |
          git cherry-pick --abort
          git commit --allow-empty -m "empty"
          git push origin $FILE_SYNC_BRANCH_NEW
      - name: Create Pull Request
        if: ${{ steps.pulls.outputs.merged_pulls != '' }}
        run: |
          gh pr create \
          -B main -H $FILE_SYNC_BRANCH_NEW \
          --reviewer kagankan \
          --title '取り込み' \
          --body '${{ steps.push.conclusion == 'failure' && 'コンフリクトしました。' || '自動生成の取り込みです。マージするかクローズしてください。' }}
            ## 関連PR
            ${{ steps.list_prs.outputs.description }}'
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        
