# .github/workflows/repo-file-sync.yaml
name: Repo File Sync

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 3 * * MON-FRI' # Run workflow at 12:00 JST every MON-FRI
permissions:
  contents: write
jobs:
  sync:
    strategy:
      matrix:
        settings:           
          -  |
             {
                "repo": "kagankan/sync-test-b",
                "files": [
                  "README.md",
                  "test/test.md"
                ]
             }
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        run: |
          git config user.name "GitHub App Bot"
          git config user.email "<email@domain.com>"
          git checkout -b new-branch-${{ github.run_id }}

      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.REPO_FILE_SYNC_APP_ID }}
          private_key: ${{ secrets.REPO_FILE_SYNC_PRIVATE_KEY }}

      - name: List PRs with changes to specific file
        uses: actions/github-script@v6
        id: list_prs
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          result-encoding: string
          script: |
            const parsedOptions = ${{ matrix.settings }};
            console.log(parsedOptions);
            const [owner, repo] = parsedOptions.repo.split("/");

            const { data: pullRequests } = await github.rest.pulls.list({
              owner: owner,
              repo: repo,
              state: 'all'
            });

            const prsWithFileChanges = [];
            const changedFiles = new Set();
            for (const pr of pullRequests) {
              const { data: files } = await github.rest.pulls.listFiles({
                owner: owner,
                repo: repo,
                pull_number: pr.number
              });

              for (const targetFile of parsedOptions.files) {
                const fileChanged = files.some(file => file.filename === targetFile);
                if (fileChanged) {
                  changedFiles.add(targetFile);
                  prsWithFileChanges.push(`${parsedOptions.repo}#${pr.number}: ${pr.title}`);
                }
              }
            }

            if (prsWithFileChanges.length > 0) {
              console.log('PRs with changes to:');
              console.log(prsWithFileChanges.join('\n'));
            } else {
              console.log('No open PRs with changes to ');
            }
            return {
              changedFiles: [...changedFiles].join("\n"),
              description: prsWithFileChanges.join("\n"),
            }

      - name: Clone and Sync Repositories
        run: |
          echo "${{ steps.list_prs.outputs.result.changedFiles }}"
          # Clone the repository
          echo "${{ fromJSON(matrix.settings).repo }}"
          REPO=${{ fromJSON(matrix.settings).repo }}
          echo "Cloning $REPO"
          git clone --depth 1 https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$REPO.git $REPO
          # Copy the specified files
          FILES=${{ steps.list_prs.outputs.result.changedFiles }}
          for FILE in $FILES; do
            echo "Copying $FILE from $REPO"
            cp "$REPO/$FILE" .
          done
          # Clean up the cloned repository directory
          rm -rf $REPO
     
          tree

      - name: Commit changes
        run: |
          git add ${{ steps.list_prs.outputs.result.changedFiles }}
          git commit -m "Update file from source repository" || echo "No changes to commit"
          git push origin new-branch-${{ github.run_id }}

      - name: Create Pull Request
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ steps.generate_token.outputs.token }}
          destination_branch: "main"
          source_branch: new-branch-${{ github.run_id }}
          pr_title: "Update from source repository"
          pr_body: |
            Automated PR to update the specified file.
            ${{ steps.list_prs.outputs.result }}
