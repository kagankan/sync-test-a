# .github/workflows/repo-file-sync.yaml
name: Repo File Sync

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 3 * * MON-FRI" # Run workflow at 12:00 JST every MON-FRI

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      # ワークフローの書き換えにはworkflows権限が必要
      SETTINGS: |
        [
          {
            "owner": "kagankan",
            "repo": "sync-test-b",
            "paths": [
              "README.md",
              ".eslintrc",
              "test/*.md",
              ".github/workflows/test.yaml",
              ".github/workflows/test.yml"
            ]
          },
          {
            "owner": "kagankan",
            "repo": "sync-test-c",
            "paths": [
              "README.md"
            ]
          }
        ]
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.REPO_FILE_SYNC_APP_ID }}
          private_key: ${{ secrets.REPO_FILE_SYNC_PRIVATE_KEY }}
      - uses: actions/checkout@v4
        with:
          # ここに権限を与えないと、workflowsの書き換えができない
          token: ${{ steps.generate_token.outputs.token }}
      - name: ファイル反映
        env:
          # ghコマンドを使うために必要
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git config user.name "file-sync [bot]"
          git config user.email "<email@example.com>"

          settings=$(echo "$SETTINGS" | jq -c '.[]')

          # 変更をもってくる
          echo "$settings" | while IFS= read -r setting; do
            owner=$(echo "$setting" | jq -r '.owner')
            repo=$(echo "$setting" | jq -r '.repo')
            paths=$(echo "$setting" | jq -r '.paths[]')

            echo "========================================"
            echo "Processing $owner/$repo with paths:"
            for path in $paths; do
            echo "- $path"
            done
            echo "========================================"
            
            FILE_SYNC_BRANCH_BASE="file-sync/$repo"
            FILE_SYNC_BRANCH_NEW="file-sync/$repo-${{ github.run_id }}"

            #  前回の同期時刻を取得
            echo "Checking out $FILE_SYNC_BRANCH_BASE"
            # ブランチが存在しない場合はmainから作成
            (git fetch origin $FILE_SYNC_BRANCH_BASE && git checkout -B $FILE_SYNC_BRANCH_BASE origin/$FILE_SYNC_BRANCH_BASE) || git checkout -b $FILE_SYNC_BRANCH_BASE origin/main
            LAST_SYNC_AT=$(git log -1 --format=%ci HEAD)
            echo "Last sync at: $LAST_SYNC_AT"

            PATHS_SPACE=$(echo "$paths" | sed 's/\n/ /g')

            # 削除ファイルを反映するために一旦削除
            rm -rf $PATHS_SPACE

            # クローン
            REPO_FULL="$owner/$repo"
            TMP_DIR="tmp"
            echo "Cloning $REPO_FULL"
            git clone --filter=blob:none --no-checkout --sparse --depth 1 https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/$REPO_FULL.git $TMP_DIR

            pushd $TMP_DIR

            git config core.sparseCheckout true
            git sparse-checkout set --no-cone $PATHS_SPACE
            git checkout
            # depth決めてもいいかも
            git fetch origin main
            echo "Checking out main"

            # コミット履歴からマージされたプルリクエストを取得
            echo "Checking merge commits since $LAST_SYNC_AT"
            MERGE_COMMITS=$(git log --sparse --first-parent --since "$LAST_SYNC_AT" --oneline --pretty=format:'%s' -- $PATHS_SPACE)
            echo $MERGE_COMMITS
            # スラッシュが入るため、デリミタを変える
            MERGED_PULLS=$(echo $MERGE_COMMITS | grep -o '#[0-9]\+' | sed "s|^|$REPO_FULL|" || echo '')
            echo "|$MERGED_PULLS|"
            popd

            # merged_pullsが空の場合は何もしない
            if [ -z "$MERGED_PULLS" ]; then
              echo "No changes to commit"
              continue
            fi

            # ファイル同期
            echo "Syncing files"
            rsync $TMP_DIR/ . -r --exclude '.git/'
            rm -rf $TMP_DIR
  
            # コミット作成
            echo "Creating commit"
            git add .
            git commit -m "$repo の変更を反映" || echo "No changes to commit"
            COMMIT_HASH=$(git rev-parse HEAD)
            git checkout -b $FILE_SYNC_BRANCH_NEW origin/main
            CONFLICT=false
            git cherry-pick $COMMIT_HASH || {
              CONFLICT=true
              echo "コンフリクト"
              git checkout --theirs .
              git add .
              git cherry-pick --continue || {
                echo "なんにもナッシング"
                git cherry-pick --abort
              }
            }
            echo "CONFLICT: $CONFLICT"
            git push origin $FILE_SYNC_BRANCH_BASE
            git push origin $FILE_SYNC_BRANCH_NEW

            # プルリクエストを作成
            echo "Creating pull request"
            gh pr create \
            -B main -H $FILE_SYNC_BRANCH_NEW \
            --reviewer kagankan \
            --title "$repo 取り込み $($CONFLICT && echo '（コンフリクト）' || echo '')" \
            --body "$($CONFLICT && echo "反映中にコンフリクトが発生しました。
            
          - 上書きで問題ない場合はこのままマージしてください。
          - 手動で修正する必要がある場合は、 \`git cherry-pick $COMMIT_HASH\` を実行して修正の上で別途PRを作成してください。
          - 反映が必要ない場合はクローズしてください。" || echo '自動生成の取り込みです。マージするかクローズしてください。')

          ## 関連PR
          $MERGED_PULLS"

          done
